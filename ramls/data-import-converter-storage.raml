#%RAML 1.0

title: Data Import Converter Storage
version: v1.0
protocols: [ HTTP, HTTPS ]
baseUri: http://localhost

documentation:
  - title: Data Import Converter Storage API
    content: API for managing data import profiles

types:
  errors: !include raml-storage/raml-util/schemas/errors.schema
  jobProfile: !include raml-storage/schemas/mod-data-import-converter-storage/jobProfile.json
  jobProfileCollection: !include raml-storage/schemas/mod-data-import-converter-storage/jobProfileCollection.json
  matchProfile: !include raml-storage/schemas/mod-data-import-converter-storage/matchProfile.json
  matchProfileCollection: !include raml-storage/schemas/mod-data-import-converter-storage/matchProfileCollection.json
  mappingProfile: !include raml-storage/schemas/mod-data-import-converter-storage/mappingProfile.json
  mappingProfileCollection: !include raml-storage/schemas/mod-data-import-converter-storage/mappingProfileCollection.json
  actionProfile: !include raml-storage/schemas/mod-data-import-converter-storage/actionProfile.json
  actionProfileCollection: !include raml-storage/schemas/mod-data-import-converter-storage/actionProfileCollection.json
  profileAssociation: !include raml-storage/schemas/mod-data-import-converter-storage/profileAssociation.json
  profileAssociationCollection: !include raml-storage/schemas/mod-data-import-converter-storage/profileAssociationCollection.json
  profileSnapshotType: !include raml-storage/schemas/mod-data-import-converter-storage/profileSnapshotType.json
  profileSnapshotWrapper: !include raml-storage/schemas/mod-data-import-converter-storage/profileSnapshotWrapper.json
  entityTypeCollection: !include raml-storage/schemas/mod-data-import-converter-storage/entityTypeCollection.json

traits:
  validate: !include raml-storage/raml-util/traits/validation.raml
  language: !include raml-storage/raml-util/traits/language.raml
  pageable:  !include raml-storage/raml-util/traits/pageable.raml
  searchable: !include raml-storage/raml-util/traits/searchable.raml

resourceTypes:
  collection: !include raml-storage/raml-util/rtypes/collection.raml
  collection-item: !include raml-storage/raml-util/rtypes/item-collection.raml

/data-import-profiles:
  /jobProfiles:
    displayName: Job Profiles
    description: API for managing Job Profiles
    type:
      collection:
        schemaCollection: jobProfileCollection
        schemaItem: jobProfile
        exampleCollection: !include raml-storage/examples/mod-data-import-converter-storage/jobProfileCollection.sample
        exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/jobProfile.sample
    post:
      is: [validate]
    get:
      queryParameters:
        showDeleted:
          description: selection condition of Job Profiles by field 'deleted'
          example: false
          type: boolean
          default: false
          required: false
      is: [
        searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
        pageable,
        validate
      ]
    /{id}:
      displayName: Job Profile
      description: Get, Delete or Update a specific Job Profile
      type:
        collection-item:
          schema: jobProfile
          exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/jobProfile.sample
      put:
        is: [validate]
        responses:
          200:
            body:
              application/json:
                type: jobProfile
      delete:
        responses:
          204:
            body:
              text/plain: !!null
  /matchProfiles:
    displayName: Match Profiles
    description: API for managing Match Profiles
    type:
      collection:
        schemaCollection: matchProfileCollection
        schemaItem: matchProfile
        exampleCollection: !include raml-storage/examples/mod-data-import-converter-storage/matchProfileCollection.sample
        exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/matchProfile.sample
    post:
      is: [validate]
    get:
      queryParameters:
        showDeleted:
          description: selection condition of Match Profiles by field 'deleted'
          example: false
          type: boolean
          default: false
          required: false
      is: [
        searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
        pageable,
        validate
      ]
    /{id}:
      displayName: Match Profile
      description: Get, Delete or Update a specific Match Profile
      type:
        collection-item:
          schema: matchProfile
          exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/matchProfile.sample
      put:
        is: [validate]
        responses:
          200:
            body:
              application/json:
                type: matchProfile
      delete:
        responses:
          204:
            body:
              text/plain: !!null
  /mappingProfiles:
    displayName: Mapping Profiles
    description: API for managing Mapping Profiles
    type:
      collection:
        schemaCollection: mappingProfileCollection
        schemaItem: mappingProfile
        exampleCollection: !include raml-storage/examples/mod-data-import-converter-storage/mappingProfileCollection.sample
        exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/mappingProfile.sample
    post:
      is: [validate]
    get:
      queryParameters:
        showDeleted:
          description: selection condition of Mapping Profiles by field 'deleted'
          example: false
          type: boolean
          default: false
          required: false
      is: [
        searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
        pageable,
        validate
      ]
    /{id}:
      displayName: Mapping Profile
      description: Get, Delete or Update a specific Mapping Profile
      type:
        collection-item:
          schema: mappingProfile
          exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/mappingProfile.sample
      put:
        is: [validate]
        responses:
          200:
            body:
              application/json:
                type: mappingProfile
      delete:
        responses:
          204:
            body:
              text/plain: !!null
  /actionProfiles:
    displayName: Action Profiles
    description: API for managing Action Profiles
    type:
      collection:
        schemaCollection: actionProfileCollection
        schemaItem: actionProfile
        exampleCollection: !include raml-storage/examples/mod-data-import-converter-storage/actionProfileCollection.sample
        exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/actionProfile.sample
    post:
      is: [validate]
    get:
      queryParameters:
        showDeleted:
          description: selection condition of Action Profiles by field 'deleted'
          example: false
          type: boolean
          default: false
          required: false
      is: [
        searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
        pageable,
        validate
      ]
    /{id}:
      displayName: Action Profile
      description: Get, Delete or Update a specific Action Profile
      type:
        collection-item:
          schema: actionProfile
          exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/actionProfile.sample
      put:
        is: [validate]
        responses:
          200:
            body:
              application/json:
                type: actionProfile
      delete:
        responses:
          204:
            body:
              text/plain: !!null
  /profileAssociations:
    displayName: Profile associations
    description: API for managing Profile associations
    type:
      collection:
        schemaCollection: profileAssociationCollection
        schemaItem: profileAssociation
        exampleCollection: !include raml-storage/examples/mod-data-import-converter-storage/profileAssociationCollection.sample
        exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/profileAssociation.sample
    post:
      is: [validate]
    get:
      is: [validate]
    /{id}:
      displayName: Profile associations
      description: Get, Delete or Update a specific Profile association
      type:
        collection-item:
          schema: profileAssociation
          exampleItem: !include raml-storage/examples/mod-data-import-converter-storage/profileAssociation.sample
      put:
        is: [validate]
        responses:
          200:
            body:
              application/json:
                type: profileAssociation
      delete:
        responses:
          204:
            body:
              text/plain: !!null
      /details:
        displayName: Details profiles by master profile id
        description: Retrives details profiles by master profile id
          Note that master-detail relationship is sort of parent-child relationship but one detail instance
          can be associated with many master instances.
        get:
          queryParameters:
            masterType:
              description: It needs to identify master profile type for an id
              required: true
              type: string
              example: "JOB_PROFILE, ACTION_PROFILE, MATCH_PROFILE, MAPPING_PROFILE"
            detailType:
              description: "It filters returned type of details. For example you need to get only MATCH_PROFILEs
              for a JOB_PROFILE but the JOB_PROFILE has ACTION_PROFILEs too. So use it as filter for a return type"
              required: false
              type: string
              example: "JOB_PROFILE, ACTION_PROFILE, MATCH_PROFILE, MAPPING_PROFILE"
          is: [
              searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
              pageable,
              validate
          ]
          responses:
              200:
                body:
                  application/json:
                    type: profileSnapshotWrapper
      /masters:
        displayName: Masters profiles by detail profile id
        description: Retrives masters profiles by detail profile id.
          Note that master-detail relationship is sort of parent-child relationship but one detail instance
          can be associated with many master instances.
        get:
          queryParameters:
            detailType:
              description: "Type of detail profile"
              required: true
              type: string
              example: "JOB_PROFILE, ACTION_PROFILE, MATCH_PROFILE, MAPPING_PROFILE"
            masterType:
              description: "It filters returned type of masters. For example you need to get only JOB_PROFILEs
              for a MATCH_PROFILE but the MATCH_PROFILE has ACTION_PROFILEs too. So use it as filter for a return type"
              required: false
              type: string
              example: "JOB_PROFILE, ACTION_PROFILE, MATCH_PROFILE, MAPPING_PROFILE"
          is: [
              searchable: {description: "with valid searchable fields: for example userInfo.lastName=Doe", example: "userInfo.lastName=Doe"},
              pageable,
              validate
          ]

          responses:
              200:
                body:
                  application/json:
                    type: profileSnapshotWrapper
  /jobProfileSnapshots:
    displayName: Profile snapshots
    description: API for managing Job Profile Snapshots
    /{id}:
      get:
        description: Method to get Job Profile Snapshot by id
        responses:
          200:
            body:
              application/json:
                type: profileSnapshotWrapper
      post:
        description: Method to create Job Profile Snapshot by Job Profile id
        responses:
          201:
            body:
              application/json:
                type: profileSnapshotWrapper
          400:
            description: "Bad request"
            body:
              text/plain:
                example: "Bad request"
          500:
            description: "Internal server error"
            body:
              text/plain:
                example: "Internal server error"
  /entityTypes:
    displayName: Entity types
    get:
      description: Get a list of entity types
      responses:
        200:
          body:
            application/json:
              type: entityTypeCollection
        400:
          description: "Bad request"
          body:
            text/plain:
              example: "Bad request"
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error"
